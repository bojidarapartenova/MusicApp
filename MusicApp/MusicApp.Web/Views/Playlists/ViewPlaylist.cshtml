@using MusicApp.Web.ViewModels.Playlists
@model PlaylistDetailsViewModel

@{
    ViewData["Title"] = "Your playlist";
}

<link href="~/css/viewPlaylistStyle.css" rel="stylesheet" />
<link href="~/css/editPlaylistStyle.css" rel="stylesheet" />

<style>
    #playlistPlayBtn {
        font-size: 1.2rem;
        padding: 0.5rem 1.5rem;
    }

    .btns{
        padding: 6px 10px;
        margin-right: 5px;
        border: 1px solid #4A5C6A;
        color: white;
        text-decoration: none;
        border-radius: 10px;
        font-size: 0.9rem;
        transition: background-color 0.3s ease;
        background-color: #4A5C6A;
    }

    .btns:hover {
            background-color: #2c363d;
            border-color: #2c363d;
    }

    .scrollable-song-list {
        max-height: 300px; 
        overflow-y: auto;
        padding-right: 10px; 
        margin-bottom: 10px;
    }
</style>

<h1>@Model.Title</h1>
<h2>Songs:</h2>

@if (!Model.IsDeafault)
{
    <div class="d-flex gap-2 mb-3">
        <button id="btn-edit" class="btn btn-primary" onclick="openModal()">Add more songs</button>
        <a asp-action="Edit" asp-route-id="@Model.Id" id="btn-edit" class="btn btn-secondary">Edit Playlist</a>
    </div>
}

@if (!Model.IsDeafault)
{
    <div id="addSongsModal" class="modal" style="display:none;">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h3>Select songs to add</h3>

            <form asp-action="AddSongsToPlaylist" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="playlistId" value="@Model.Id" />

                <div class="scrollable-song-list">
                    @foreach (var song in Model.AvailableSongs)
                    {
                        <div class="form-check" style="margin: 10px;">
                            <input class="form-check-input" type="checkbox" name="selectedSongIds" value="@song.Id" id="song-@song.Id" />
                            <label class="form-check-label" for="song-@song.Id">
                                <img src="@song.ImageUrl" style="height:40px;" />
                                @song.Title - @song.Artist
                            </label>
                        </div>
                    }
                </div>

                <button id="btn-add" type="submit" class="btn btn-success mt-2">Add Selected Songs</button>
            </form>

        </div>
    </div>
}

<span id="nowPlayingLabel" style="display: block; font-weight: bold; font-size: 18px; color: #ccd0cf;">
    Now Playing: None
</span>
<div class="playlist-player mt-4">
    <audio id="playlistAudio" controls style="width: 100%;">
        <source id="audioSource" src="" type="audio/mpeg" />
        Your browser does not support the audio element.
    </audio>

    <div class="d-flex justify-content-center gap-2 mt-2">
        <button class="btns" style="font-family: 'Segoe UI Symbol', Arial; font-size: 20px;"  onclick="playPrevious()">&#9194;</button>
        <button id="playlistPlayBtn" class="btns">▷</button>
        <button class="btns" style="font-family: 'Segoe UI Symbol', 'Arial'; font-size: 20px;"  onclick="playNext()">&#9193;</button>
    </div>
</div>

@if (Model.Songs.Any())
{
    <table class="playlist-table">
        <tbody>
            @foreach (var song in Model.Songs)
            {
                <tr>
                    <td>
                        <img src="@song.ImageUrl" alt="Cover" style="height: 60px; border-radius: 5px;" />
                    </td>
                    <td>@song.Title</td>
                    <td>
                        <button class="btn-action btns" onclick="playSongAtIndex(@Model.Songs.IndexOf(song))">Play</button>

                        @if (!Model.IsDeafault)
                        {
                            <form asp-action="RemoveSong"
                                  asp-route-playlistId="@Model.Id"
                                  asp-route-songId="@song.Id"
                                  method="post"
                                  style="display:inline;">
                                <button style="font-family: 'Segoe UI Symbol', Arial;" type="submit" class="btn-action delete">&#10060;</button>
                            </form>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>This playlist has no songs.</p>
}

@section Scripts {
    <script>
        function openModal() {
            document.getElementById("addSongsModal").style.display = "block";
        }

        function closeModal() {
            document.getElementById("addSongsModal").style.display = "none";
        }

        window.onclick = function (event) {
            const modal = document.getElementById("addSongsModal");
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        const playlist = @Html.Raw(Json.Serialize(Model.Songs));
        let currentSongIndex = 0;
        let isPlaying = false;

        const audio = document.getElementById("playlistAudio");
        const source = document.getElementById("audioSource");
        const playBtn = document.getElementById("playlistPlayBtn");
        const nowPlaying = document.getElementById("nowPlayingLabel");

                function loadSong(index) {
            if (index < 0 || index >= playlist.length) return;

            currentSongIndex = index;
            const song = playlist[currentSongIndex];

            audio.src = song.audioUrl;
            audio.load();
            nowPlaying.textContent = `Now Playing: ${song.title}`;
        }


        function playCurrentSong() {
            loadSong(currentSongIndex);
            audio.play().catch(err => console.error("Playback error", err));
            playBtn.textContent = "❚❚";
            isPlaying = true;
        }

               function pauseCurrentSong() {
            audio.pause();
            playBtn.textContent = "▷";
            isPlaying = false;
        }


        playBtn.addEventListener("click", function () {
            if (isPlaying) {
                pauseCurrentSong();
            } else {
                playCurrentSong();
            }
        });

        function playNext() {
            if (currentSongIndex + 1 < playlist.length) {
                currentSongIndex++;
                playCurrentSong();
            }
        }

        function playPrevious() {
            if (currentSongIndex - 1 >= 0) {
                currentSongIndex--;
                playCurrentSong();
            }
        }

                function playSongAtIndex(index) {
            if (index < 0 || index >= playlist.length) return;
            currentSongIndex = index;
            playCurrentSong();
        }

        audio.addEventListener("ended", playNext);
    </script>
}
